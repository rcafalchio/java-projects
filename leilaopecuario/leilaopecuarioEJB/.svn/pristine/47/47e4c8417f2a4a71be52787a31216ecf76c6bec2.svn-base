package com.leilaopecuario.persistencia;

import java.lang.reflect.InvocationTargetException;
import java.util.Date;
import java.util.List;

import javax.ejb.Stateless;
import javax.persistence.EntityManager;
import javax.persistence.NoResultException;
import javax.persistence.PersistenceContext;
import javax.persistence.Query;

import org.apache.commons.beanutils.BeanUtils;
import org.apache.log4j.Logger;

import com.leilaopecuario.entidades.Animal;
import com.leilaopecuario.entidades.CaminhoFotos;
import com.leilaopecuario.entidades.ChaveLance;
import com.leilaopecuario.entidades.InformacoesLanceLeilao;
import com.leilaopecuario.entidades.Lance;
import com.leilaopecuario.entidades.Leilao;
import com.leilaopecuario.entidades.Usuario;
import com.leilaopecuario.exception.PersistenciaException;
import com.leilaopecuario.vo.AnimalVO;
import com.leilaopecuario.vo.LanceVO;
import com.leilaopecuario.vo.LeilaoVO;
import com.leilaopecuario.vo.UsuarioVO;

@Stateless
// <<<<<<< .mine
// public class ControladorPersistenciaLeilao implements
// ControladorPersistenciaLeilaoLocal {
// =======
public class ControladorPersistenciaLeilao implements ControladorPersistenciaLeilaoLocal {

	private static Logger LOGGER = Logger.getLogger(ControladorPersistenciaLeilao.class);

	@PersistenceContext(name = "leilao")
	private EntityManager entityManager;

	@Override
	public Integer inserirLeilao(final LeilaoVO leilaoVO) throws PersistenciaException {
		Integer codigoLeilao = null;
		try {
			// final Leilao leilao = new Leilao();
			final Leilao leilao = new Leilao();

			leilao.setTitulo(leilaoVO.getTitulo());
			leilao.setDescricao(leilaoVO.getDescricao());
			leilao.setLanceInicial(leilaoVO.getLanceInicial());
			leilao.setDataCadastro(leilaoVO.getDataCadastro());
			leilao.setDataEHoraFinal(leilaoVO.getDataEHoraFinal());
			final Animal animal = this.populaAnimal(leilaoVO);

			leilao.setAnimal(animal);

			animal.setLeilao(leilao);

			leilao.setUsuario(this.populaUsuario(leilaoVO));

			entityManager.persist(leilao);
			codigoLeilao = leilao.getCodigo();

		} catch (Exception e) {
			LOGGER.error("Erro no método inserirLeilao", e);
			throw new PersistenciaException(e);
		}

		return codigoLeilao;
	}

	private Animal populaAnimal(LeilaoVO leilaoVO) throws PersistenciaException, IllegalAccessException,
			InvocationTargetException {
		final AnimalVO animalVO = leilaoVO.getAnimalVO();
		final Animal animal = new Animal();
		BeanUtils.copyProperties(animal, animalVO);

		return animal;
	}

	private Usuario populaUsuario(LeilaoVO leilaoVO) throws PersistenciaException, IllegalAccessException,
			InvocationTargetException, NoSuchMethodException {
		final UsuarioVO usuarioVO = leilaoVO.getUsuarioVO();
		final Usuario usuario = new Usuario();
		// PropertyUtils.copyProperties(usuario, usuarioVO);

		usuario.setCodigo(usuarioVO.getCodigo());

		return usuario;
	}

	@Override
	@SuppressWarnings("unchecked")
	public List<Leilao> buscarLeiloesAtivos() throws PersistenciaException {

		List<Leilao> leiloes = null;

		try {
			final String queryString = "SELECT l FROM Leilao l ";
			Query query = entityManager.createQuery(queryString);
			leiloes = query.getResultList();
		} catch (NoResultException e) {
			LOGGER.info("Não Existem Leilões Cadastrados");
			leiloes = null;
		} catch (Exception e) {
			LOGGER.error("Erro no método buscarLeiloesAtivos", e);
			throw new PersistenciaException(e);
		}

		return leiloes;
	}

	@Override
	public CaminhoFotos obtemCaminhoFoto(Integer codigo) throws PersistenciaException {

		CaminhoFotos caminhosFotos = null;

		try {
			final String queryString = "SELECT c FROM CaminhoFotos c " + "where c.leilao.codigo = :codigo";
			Query query = entityManager.createQuery(queryString);
			query.setParameter("codigo", codigo);
			caminhosFotos = (CaminhoFotos) query.getSingleResult();
		} catch (Exception e) {
			LOGGER.error("Erro no método buscarLeiloesAtivos", e);
			throw new PersistenciaException(e);
		}

		return caminhosFotos;
	}

	@Override
	public void atualizarLeilao(LeilaoVO leilaoVO) throws PersistenciaException {

		try {
			Leilao leilao = entityManager.find(Leilao.class, leilaoVO.getCodigo());

			CaminhoFotos caminhoFotos = new CaminhoFotos();
			caminhoFotos.setCaminho(leilaoVO.getCaminhosFotos().getCaminho());
			caminhoFotos.setFotoPrincipal(leilaoVO.getCaminhosFotos().getFotoPrincipal());
			caminhoFotos.setLeilao(leilao);
			leilao.setCaminhoFotos(caminhoFotos);
			entityManager.merge(leilao);
			entityManager.flush();
		} catch (Exception e) {
			LOGGER.error("Erro no método inserirLeilao", e);
			throw new PersistenciaException(e);
		}

	}

	@Override
	public Double recuperaLanceAtual(Integer codigo) throws PersistenciaException {

		Double retorno = null;

		try {
			final String queryString = "SELECT i.lanceAtual FROM InformacoesLanceLeilao i "
					+ "where i.codigoLeilao = :codigo";
			Query query = entityManager.createQuery(queryString);
			query.setParameter("codigo", codigo);
			retorno = (Double) query.getSingleResult();
		} catch (NoResultException e) {
			retorno = null;
		} catch (Exception e) {
			LOGGER.error("Erro no método buscarLeiloesAtivos", e);
			throw new PersistenciaException(e);
		}
		return retorno;

	}

	@Override
	public void atualizarLance(LanceVO lanceVO) throws PersistenciaException {

		try {
			final String queryString = "SELECT i FROM InformacoesLanceLeilao i " + "where i.codigoLeilao = :codigo";
			final Query query = entityManager.createQuery(queryString);
			query.setParameter("codigo", lanceVO.getLeilaoVO().getCodigo());
			final InformacoesLanceLeilao informacoesLanceLeilao = (InformacoesLanceLeilao) query.getSingleResult();
			// Atualiza o lance vencedor até o momento
			informacoesLanceLeilao.setLanceAtual(lanceVO.getLance());
			// Soma um nos lances efetuados
			informacoesLanceLeilao.setQuantidadeLancesEfetuados(informacoesLanceLeilao.getQuantidadeLancesEfetuados()
					.intValue() + 1);

			// Registra o lance do usuário para aquele leilão
			ChaveLance chaveLance = new ChaveLance();
			chaveLance.setCodigoLeilao(lanceVO.getLeilaoVO().getCodigo());
			chaveLance.setCodigoUsuario(lanceVO.getUsuarioVO().getCodigo());
			Lance lance = entityManager.find(Lance.class, chaveLance);
			if (lance == null) {
				lance = new Lance();
			}
			lance.setChaveLance(chaveLance);
			lance.setLance(lanceVO.getLance());
			lance.setDataLance(new Date());
			entityManager.merge(lance);
		} catch (Exception e) {
			LOGGER.error("Erro no método atualizarLance", e);
			throw new PersistenciaException(e);
		}

	}
}
