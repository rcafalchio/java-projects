package com.leilaopecuario.persistencia;

import java.util.List;

import javax.ejb.Stateless;
import javax.persistence.EntityManager;
import javax.persistence.PersistenceContext;
import javax.persistence.Query;

import org.apache.log4j.Logger;

import com.leilaopecuario.entidades.CaminhoFotos;
import com.leilaopecuario.entidades.Leilao;
import com.leilaopecuario.exception.PersistenciaException;
import com.leilaopecuario.vo.CaminhoFotoVO;
import com.leilaopecuario.vo.LeilaoVO;

@Stateless
public class ControladorPersistenciaLeilao implements
		ControladorPersistenciaLeilaoLocal {

	private static Logger LOGGER = Logger
			.getLogger(ControladorPersistenciaLeilao.class);

	@PersistenceContext(name = "leilao")
	private EntityManager entityManager;

	@Override
	public Integer inserirLeilao(final LeilaoVO leilaoVO)
			throws PersistenciaException {
		Integer codigoLeilao = null;
		try {
			final Leilao leilao = new Leilao();
			leilao.setTitulo(leilaoVO.getTitulo());
			leilao.setDescricao(leilaoVO.getDescricao());
			entityManager.persist(leilao);
			codigoLeilao = leilao.getCodigo();

		} catch (Exception e) {
			LOGGER.error("Erro no método inserirLeilao", e);
			throw new PersistenciaException(e);
		}

		return codigoLeilao;
	}

	@Override
	@SuppressWarnings("unchecked")
	public List<Leilao> buscarLeiloesAtivos() throws PersistenciaException {

		List<Leilao> leiloes = null;

		try {
			final String queryString = "SELECT l FROM Leilao l ";
			Query query = entityManager.createQuery(queryString);
			leiloes = query.getResultList();
		} catch (Exception e) {
			LOGGER.error("Erro no método buscarLeiloesAtivos", e);
			throw new PersistenciaException(e);
		}

		return leiloes;
	}

	@SuppressWarnings("unchecked")
	@Override
	public List<CaminhoFotos> obtemCaminhoFotos(Integer codigo)
			throws PersistenciaException {

		List<CaminhoFotos> caminhosFotos = null;

		try {
			final String queryString = "SELECT c FROM CaminhoFotos c "
					+ "where c.leilao.codigo = :codigo";
			Query query = entityManager.createQuery(queryString);
			query.setParameter("codigo", codigo);
			caminhosFotos = query.getResultList();
		} catch (Exception e) {
			LOGGER.error("Erro no método buscarLeiloesAtivos", e);
			throw new PersistenciaException(e);
		}

		return caminhosFotos;
	}

	@Override
	public void atualizarLeilao(LeilaoVO leilaoVO) throws PersistenciaException {

		try {
			Leilao leilao = entityManager.find(Leilao.class,
					leilaoVO.getCodigo());

			for (CaminhoFotoVO caminho : leilaoVO.getCaminhosFotos()) {
				CaminhoFotos caminhoFotos = new CaminhoFotos();
				caminhoFotos.setCaminho(caminho.getCaminho());
				caminhoFotos.setFotoPrincipal(caminho.isFotoPrincipal());
				caminhoFotos.setLeilao(leilao);
				leilao.getCaminhoFotos().add(caminhoFotos);
			}

			entityManager.merge(leilao);

		} catch (Exception e) {
			LOGGER.error("Erro no método inserirLeilao", e);
			throw new PersistenciaException(e);
		}

	}

}
