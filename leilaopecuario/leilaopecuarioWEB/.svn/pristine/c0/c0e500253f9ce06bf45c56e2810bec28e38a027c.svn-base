package br.com.leilaopecuario.bean;

import java.io.File;
import java.io.FileOutputStream;
import java.util.List;

import javax.annotation.PostConstruct;
import javax.ejb.EJB;
import javax.faces.bean.ManagedBean;
import javax.faces.context.ExternalContext;
import javax.faces.context.FacesContext;
import javax.servlet.ServletContext;
import javax.servlet.http.HttpServletResponse;

import org.apache.log4j.Logger;
import org.primefaces.event.FileUploadEvent;
import org.primefaces.event.ToggleEvent;

import com.leilaopecuario.exception.LeilaoException;
import com.leilaopecuario.negocio.GerenciadorLeilaoLocal;
import com.leilaopecuario.vo.LanceVO;
import com.leilaopecuario.vo.LeilaoVO;

@ManagedBean
public class ControladorLeilaoBean {

	private final static Logger LOGGER = Logger.getLogger(ControladorLeilaoBean.class);

	private List<LeilaoVO> leiloes = null;
	private LeilaoVO leilaoVO = null;
	private List<String> listaFotos = null;
	private String fotoPrincipal = null;
	private LanceVO lanceVO = null;

	@EJB
	private GerenciadorLeilaoLocal gerenciadorLeilao;

	public void fileUploadAction(FileUploadEvent event) {
		try {
			ExternalContext externalContext = FacesContext.getCurrentInstance().getExternalContext();
			HttpServletResponse response = (HttpServletResponse) externalContext.getResponse();

			FacesContext aFacesContext = FacesContext.getCurrentInstance();
			ServletContext context = (ServletContext) aFacesContext.getExternalContext().getContext();

			String realPath = context.getRealPath("/");

			// Aqui cria o diretorio caso não exista
			File file = new File(realPath + "/fotos/");
			file.mkdirs();

			byte[] arquivo = event.getFile().getContents();
			String caminho = realPath + "/fotos/" + event.getFile().getFileName();

			// esse trecho grava o arquivo no diretório
			FileOutputStream fos = new FileOutputStream(caminho);
			fos.write(arquivo);
			fos.close();

		} catch (Exception ex) {
			System.out.println("Erro no upload de imagem" + ex);
		}
	}

	@PostConstruct
	public void init() {

		try {
			this.leiloes = gerenciadorLeilao.recuperaLeiloesAtivos();
		} catch (LeilaoException e) {
			LOGGER.error("Problema ao recuperar os leilões ativos!");
		}

	}

	public List<String> carregaListaFotos() {
		try {
			if (leilaoVO != null && leilaoVO.getCodigo() != null) {
				this.listaFotos = gerenciadorLeilao.recuperaFotosLeilao(leilaoVO.getCodigo());
			}
		} catch (Exception e) {
			LOGGER.error("Problema ao carregar a lista de fotos do leilão", e);
		}

		return listaFotos;
	}

	public List<LeilaoVO> getLeiloes() {
		return leiloes;
	}

	public void setLeiloes(List<LeilaoVO> leiloes) {
		this.leiloes = leiloes;
	}

	public void handleToggle(ToggleEvent event) {

	}

	public String efetuaLance(LeilaoVO leilaoVO) {

		String retorno = "";

		if (leilaoVO != null) {
			this.leilaoVO = leilaoVO;
			retorno = "paginalance";
		}

		return retorno;
	}

	public String enviarLance() {

		String retorno = "";

		return retorno;
	}

	public LeilaoVO getLeilaoVO() {
		return leilaoVO;
	}

	public void setLeilaoVO(LeilaoVO leilaoVO) {
		this.leilaoVO = leilaoVO;
	}

	public List<String> getListaFotos() {
		if (this.listaFotos == null) {
			this.listaFotos = carregaListaFotos();
		}
		return this.listaFotos;
	}

	public void setListaFotos(List<String> listaFotos) {
		this.listaFotos = listaFotos;
	}

	public String getFotoPrincipal() {
		return fotoPrincipal;
	}

	public void setFotoPrincipal(String fotoPrincipal) {
		this.fotoPrincipal = fotoPrincipal;
	}

	public LanceVO getLanceVO() {
		if (lanceVO == null) {
			lanceVO = new LanceVO();
		}
		return lanceVO;
	}

	public void setLanceVO(LanceVO lanceVO) {
		this.lanceVO = lanceVO;
	}

}
