package br.com.leilaopecuario.bean;

import java.io.File;
import java.io.FileNotFoundException;
import java.io.FileOutputStream;
import java.io.IOException;
import java.util.ArrayList;
import java.util.List;

import javax.annotation.PostConstruct;
import javax.ejb.EJB;
import javax.faces.bean.ManagedBean;
import javax.faces.bean.SessionScoped;
import javax.faces.context.ExternalContext;
import javax.faces.context.FacesContext;
import javax.faces.event.ActionEvent;
import javax.servlet.ServletContext;
import javax.servlet.http.HttpServletResponse;
import javax.servlet.http.HttpSession;

import org.apache.log4j.Logger;
import org.primefaces.event.FileUploadEvent;
import org.primefaces.event.FlowEvent;
import org.primefaces.event.ToggleEvent;
import org.primefaces.model.UploadedFile;

import com.leilaopecuario.exception.LeilaoException;
import com.leilaopecuario.negocio.GerenciadorLeilaoLocal;
import com.leilaopecuario.vo.CaminhoFotoVO;
import com.leilaopecuario.vo.LanceVO;
import com.leilaopecuario.vo.LeilaoVO;
import com.leilaopecuario.vo.UsuarioVO;

@ManagedBean
@SessionScoped
public class ControladorLeilaoBean {

	private final static Logger LOGGER = Logger.getLogger(ControladorLeilaoBean.class);

	private List<LeilaoVO> leiloes = null;
	private LeilaoVO leilaoVO = null;
	private List<String> listaFotos = null;
	private String fotoPrincipal = null;
	private LanceVO lanceVO = null;
	
	private List<UploadedFile> listaDeFotos = new ArrayList<UploadedFile>();


	public String onFlowProcess(FlowEvent event) {
		return event.getNewStep();
	}
	
	
	@EJB
	private GerenciadorLeilaoLocal gerenciadorLeilao;

	public void fileUploadAction(FileUploadEvent event) {
		try {
			
			
			
			ExternalContext externalContext = FacesContext.getCurrentInstance().getExternalContext();
			HttpServletResponse response = (HttpServletResponse) externalContext.getResponse();

			FacesContext aFacesContext = FacesContext.getCurrentInstance();
			ServletContext context = (ServletContext) aFacesContext.getExternalContext().getContext();

			String realPath = context.getRealPath("/");

			
			HttpSession httpSession = (HttpSession) FacesContext.getCurrentInstance().getExternalContext()
					.getSession(false);
			UsuarioVO usuario = (UsuarioVO) httpSession.getAttribute("usuario");
			
			// Aqui cria o diretorio caso não exista
			//File file = new File(realPath + "/fotos/" + usuario.getCodigo() + "/");
			//file.mkdirs();

			//byte[] arquivo = event.getFile().getContents();
			//String caminho = realPath + "/fotos/" + event.getFile().getFileName();

			// esse trecho grava o arquivo no diretório
			//FileOutputStream fos = new FileOutputStream(caminho);
			
			
			listaDeFotos.add(event.getFile());
			
			//fos.write(arquivo);
			//fos.close();
			
			//CaminhoFotoVO foto = new CaminhoFotoVO();
			//foto.setCaminho(caminho);
						
			//leilaoVO.getCaminhosFotos().add(foto);
			

		} catch (Exception ex) {
			System.out.println("Erro no upload de imagem" + ex);
		}
	}

	@PostConstruct
	public void init() {

		try {
			this.leiloes = gerenciadorLeilao.recuperaLeiloesAtivos();
		} catch (LeilaoException e) {
			LOGGER.error("Problema ao recuperar os leilões ativos!");
		}

	}

	public List<String> carregaListaFotos() {
		try {
			if (leilaoVO != null && leilaoVO.getCodigo() != null) {
				this.listaFotos = gerenciadorLeilao.recuperaFotosLeilao(leilaoVO.getCodigo());
			}
		} catch (Exception e) {
			LOGGER.error("Problema ao carregar a lista de fotos do leilão", e);
		}

		return listaFotos;
	}

	public List<LeilaoVO> getLeiloes() {
		return leiloes;
	}

	public void setLeiloes(List<LeilaoVO> leiloes) {
		this.leiloes = leiloes;
	}

	public void handleToggle(ToggleEvent event) {

	}

	public String efetuaLance(LeilaoVO leilaoVO) {

		String retorno = "";

		if (leilaoVO != null) {
			this.leilaoVO = leilaoVO;
			retorno = "paginalance";
		}

		return retorno;
	}

	public String enviarLance() {

		String retorno = "";

		return retorno;
	}

	public LeilaoVO getLeilaoVO() {
		if(this.leilaoVO==null){
			this.leilaoVO = new LeilaoVO();
		}
		return leilaoVO;
	}

	public void setLeilaoVO(LeilaoVO leilaoVO) {
		this.leilaoVO = leilaoVO;
	}

	public List<String> getListaFotos() {
		if (this.listaFotos == null) {
			this.listaFotos = carregaListaFotos();
		}
		return this.listaFotos;
	}

	public void setListaFotos(List<String> listaFotos) {
		this.listaFotos = listaFotos;
	}

	public String getFotoPrincipal() {
		return fotoPrincipal;
	}

	public void setFotoPrincipal(String fotoPrincipal) {
		this.fotoPrincipal = fotoPrincipal;
	}

	public LanceVO getLanceVO() {
		if (lanceVO == null) {
			lanceVO = new LanceVO();
		}
		return lanceVO;
	}

	public void setLanceVO(LanceVO lanceVO) {
		this.lanceVO = lanceVO;
	}

	
	
	public void cadastraLeilao(ActionEvent actionEvent) throws IOException {
		   
		Integer codigoLeilao =  gerenciadorLeilao.gravaLeilao(leilaoVO);
		// Persist user
		//FacesMessage msg = new FacesMessage("Cadastrado com sucesso!", "Bem Vindo :"
		//		+ leilaoVO.getTitulo());
			
		//FacesContext.getCurrentInstance().addMessage(null, msg);
		
		

		FacesContext aFacesContext = FacesContext.getCurrentInstance();
		ServletContext context = (ServletContext) aFacesContext.getExternalContext().getContext();
		
		String realPath = context.getRealPath("/");
		// Aqui cria o diretorio caso não exista
		File file = new File(realPath + "/fotos/" + codigoLeilao + "/" );
		file.mkdirs();

		for (UploadedFile foto : listaDeFotos) {
			
			byte[] arquivo = foto.getContents();
			
			FileOutputStream fos = new FileOutputStream(file+ "\\" + foto.getFileName());
		
			fos.write(arquivo);
			fos.close();
			
			
			CaminhoFotoVO caminhoFoto = new CaminhoFotoVO();
			caminhoFoto.setCaminho(arquivo.toString());
			
			leilaoVO.getCaminhosFotos().add(caminhoFoto);
			
			
					
			
		}
		
		leilaoVO.setCodigo(codigoLeilao);
		gerenciadorLeilao.atualizarLeilao(leilaoVO);
		
		
	}

	public List<UploadedFile> getListaDeFotos() {
		return listaDeFotos;
	}

	public void setListaDeFotos(List<UploadedFile> listaDeFotos) {
		this.listaDeFotos = listaDeFotos;
	}
	
}
