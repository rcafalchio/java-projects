package br.com.leilaopecuario.bean;

import java.io.File;
import java.io.FileOutputStream;
import java.io.IOException;
import java.util.ArrayList;
import java.util.List;

import javax.annotation.PostConstruct;
import javax.ejb.EJB;
import javax.faces.application.FacesMessage;
import javax.faces.bean.ManagedBean;
import javax.faces.bean.SessionScoped;
import javax.faces.context.FacesContext;
import javax.faces.event.ActionEvent;
import javax.servlet.ServletContext;
import javax.servlet.http.HttpSession;

import org.apache.log4j.Logger;
import org.primefaces.event.FileUploadEvent;
import org.primefaces.event.FlowEvent;
import org.primefaces.event.ToggleEvent;
import org.primefaces.model.UploadedFile;

import com.leilaopecuario.constantes.ConstantesMensagens;
import com.leilaopecuario.exception.LeilaoException;
import com.leilaopecuario.negocio.GerenciadorLeilaoLocal;
import com.leilaopecuario.vo.CaminhoFotoVO;
import com.leilaopecuario.vo.LanceVO;
import com.leilaopecuario.vo.LeilaoVO;
import com.leilaopecuario.vo.UsuarioVO;

@ManagedBean
@SessionScoped
public class ControladorLeilaoBean {

	private final static Logger LOGGER = Logger
			.getLogger(ControladorLeilaoBean.class);

	private List<LeilaoVO> leiloes = null;
	private LeilaoVO leilaoVO = null;
	private List<String> listaFotos = null;
	private String fotoPrincipal = null;
	private LanceVO lanceVO = null;

	private List<UploadedFile> listaDeFotos = new ArrayList<UploadedFile>();

	public String onFlowProcess(FlowEvent event) {
		return event.getNewStep();
	}

	@EJB
	private GerenciadorLeilaoLocal gerenciadorLeilao;

	public void fileUploadAction(FileUploadEvent event) {
		try {
			listaDeFotos.add(event.getFile());
		} catch (Exception ex) {
			System.out.println("Erro no upload de imagem" + ex);
		}
	}

	@PostConstruct
	public void init() {

		try {
			this.leiloes = gerenciadorLeilao.recuperaLeiloesAtivos();
		} catch (LeilaoException e) {
			LOGGER.error("Problema ao recuperar os leilões ativos!");
		}

	}

	public List<String> carregaListaFotos() {
		try {
			if (leilaoVO != null && leilaoVO.getCodigo() != null) {
				this.listaFotos = gerenciadorLeilao
						.recuperaFotosLeilao(leilaoVO.getCodigo());
			}
		} catch (Exception e) {
			LOGGER.error("Problema ao carregar a lista de fotos do leilão", e);
		}

		return listaFotos;
	}

	public List<LeilaoVO> getLeiloes() {
		return leiloes;
	}

	public void setLeiloes(List<LeilaoVO> leiloes) {
		this.leiloes = leiloes;
	}

	public void handleToggle(ToggleEvent event) {

	}

	public String efetuaLance(LeilaoVO leilaoVO) {

		String retorno = "";

		if (leilaoVO != null) {
			this.leilaoVO = leilaoVO;
			retorno = "paginalance";
		}

		return retorno;
	}

	public String enviarLance() {

		String retorno = "";

		try {
			HttpSession httpSession = (HttpSession) FacesContext
					.getCurrentInstance().getExternalContext()
					.getSession(false);
			lanceVO.setLeilaoVO(leilaoVO);
			lanceVO.setUsuarioVO((UsuarioVO) httpSession
					.getAttribute("usuario"));
			String fraseErro = gerenciadorLeilao.efetuarLance(lanceVO);
			if (fraseErro != null) {
				FacesContext.getCurrentInstance().addMessage(
						"msg_cadastro",
						new FacesMessage(FacesMessage.SEVERITY_WARN, fraseErro,
								""));
			} else {
				FacesContext.getCurrentInstance().addMessage(
						"msg_cadastro",
						new FacesMessage(FacesMessage.SEVERITY_INFO,
								ConstantesMensagens.INFO_LANCE_SUCESSO, ""));

				retorno = "login";
			}
		} catch (LeilaoException e) {
			FacesContext.getCurrentInstance().addMessage(
					"msg_cadastro",
					new FacesMessage(FacesMessage.SEVERITY_FATAL,
							ConstantesMensagens.FALHA_GENERICA, ""));

			LOGGER.error("Erro no método enviarLance ", e);
		}

		return retorno;
	}

	public LeilaoVO getLeilaoVO() {
		if (this.leilaoVO == null) {
			this.leilaoVO = new LeilaoVO();
		}
		return leilaoVO;
	}

	public void setLeilaoVO(LeilaoVO leilaoVO) {
		this.leilaoVO = leilaoVO;
	}

	public List<String> getListaFotos() {
		if (this.listaFotos == null) {
			this.listaFotos = carregaListaFotos();
		}
		return this.listaFotos;
	}

	public void setListaFotos(List<String> listaFotos) {
		this.listaFotos = listaFotos;
	}

	public String getFotoPrincipal() {
		return fotoPrincipal;
	}

	public void setFotoPrincipal(String fotoPrincipal) {
		this.fotoPrincipal = fotoPrincipal;
	}

	public LanceVO getLanceVO() {
		if (lanceVO == null) {
			lanceVO = new LanceVO();
		}
		return lanceVO;
	}

	public void setLanceVO(LanceVO lanceVO) {
		this.lanceVO = lanceVO;
	}

	public void cadastraLeilao(ActionEvent actionEvent) {

		try {

			HttpSession httpSession = (HttpSession) FacesContext
					.getCurrentInstance().getExternalContext()
					.getSession(false);
			UsuarioVO usuarioVO = (UsuarioVO) httpSession
					.getAttribute("usuario");

			Integer codigoLeilao = gerenciadorLeilao.gravaLeilao(leilaoVO);

			FacesContext aFacesContext = FacesContext.getCurrentInstance();
			ServletContext context = (ServletContext) aFacesContext
					.getExternalContext().getContext();

			String realPath = context.getRealPath("/");
			// Aqui cria o diretorio caso não exista
			File file = new File(realPath + "/fotos/" + codigoLeilao + "/");
			file.mkdirs();

			for (UploadedFile foto : listaDeFotos) {

				byte[] arquivo = foto.getContents();

				FileOutputStream fos = new FileOutputStream(file + "\\"
						+ foto.getFileName());

				fos.write(arquivo);
				fos.close();

				CaminhoFotoVO caminhoFoto = new CaminhoFotoVO();
				caminhoFoto.setCaminho(arquivo.toString());

				leilaoVO.getCaminhosFotos().add(caminhoFoto);

			}

			leilaoVO.setUsuarioVO(usuarioVO);
			leilaoVO.setCodigo(codigoLeilao);
			gerenciadorLeilao.atualizarLeilao(leilaoVO);

			FacesContext.getCurrentInstance().addMessage(
					"msg_cadastro",
					new FacesMessage(FacesMessage.SEVERITY_INFO,
							ConstantesMensagens.INFO_USUARIO_CADASTRADO, ""));

		} catch (Exception e) {
			e.printStackTrace();
		}
	}

	public List<UploadedFile> getListaDeFotos() {
		return listaDeFotos;
	}

	public void setListaDeFotos(List<UploadedFile> listaDeFotos) {
		this.listaDeFotos = listaDeFotos;
	}

}
